<?php
/**
 * Contains the AttributeTest class.
 *
 * @copyright   Copyright (c) 2018 Attila Fulop
 * @author      Attila Fulop
 * @license     MIT
 * @since       2018-12-08
 *
 */

namespace Vanilo\Attributes\Tests;

use Vanilo\Attributes\Models\Attribute;

class AttributeTest extends TestCase
{
    /** @test */
    public function all_mutable_fields_can_be_mass_assigned()
    {
        $attribute = Attribute::create([
            'name'          => 'Funkiness',
            'type'          => 'text',
            'slug'          => 'funkiness',
            'configuration' => ['x' => 'y', 'a' => 'b']
        ]);

        $this->assertEquals('Funkiness', $attribute->name);
        $this->assertEquals('text', $attribute->type);
        $this->assertEquals('funkiness', $attribute->slug);
        $this->assertEquals(['x' => 'y', 'a' => 'b'], $attribute->configuration);
    }

    /** @test */
    public function all_mutable_fields_can_be_set()
    {
        $attribute = new Attribute();

        $attribute->name          = 'Creepiness';
        $attribute->type          = 'number';
        $attribute->slug          = 'creepiness';
        $attribute->configuration = ['bam' => 'zdish', 'bumm' => 'tsish'];

        $this->assertEquals('Creepiness', $attribute->name);
        $this->assertEquals('number', $attribute->type);
        $this->assertEquals('creepiness', $attribute->slug);

        $cfg = $attribute->configuration;
        $this->assertInternalType('array', $cfg);
        $this->assertEquals('zdish', $cfg['bam']);
        $this->assertEquals('tsish', $cfg['bumm']);
    }

    /** @test */
    public function slug_is_autogenerated_from_name()
    {
        $attribute = Attribute::create([
            'name' => 'Example Attribute',
            'type' => 'text'
        ]);

        $this->assertEquals('example-attribute', $attribute->slug);
    }

    /** @test */
    public function slug_must_be_unique()
    {
        $this->expectExceptionMessageRegExp('/UNIQUE constraint failed/');

        $a1 = Attribute::create([
            'name' => 'Color',
            'type' => 'text',
            'slug' => 'color'
        ]);

        $a2 = Attribute::create([
            'name' => 'Color',
            'type' => 'text',
            'slug' => 'color'
        ]);

        $this->assertNotEquals($a1->slug, $a2->slug);
    }

    /** @test */
    public function autogenerated_slugs_are_unique()
    {
        $a1 = Attribute::create([
            'name' => 'RAM Size',
            'type' => 'text'
        ]);

        $a2 = Attribute::create([
            'name' => 'RAM Size',
            'type' => 'text'
        ]);

        $this->assertNotEquals($a1->slug, $a2->slug);
    }
}
